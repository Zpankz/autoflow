"""kg_enhancements

Revision ID: f4e8c1d92b5a
Revises: 2adc0b597dcd
Create Date: 2025-01-25 14:30:00.000000

"""

from alembic import op
import sqlalchemy as sa
from sqlalchemy import text
from sqlmodel import Session

from app.core.db import engine

# revision identifiers, used by Alembic.
revision = "f4e8c1d92b5a"
down_revision = "2adc0b597dcd"
branch_labels = None
depends_on = None


def get_dynamic_table_names():
    """Get all dynamically created entities and relationships table names"""
    inspector = sa.inspect(engine)
    table_names = inspector.get_table_names()
    
    entity_tables = [name for name in table_names if name.startswith('entities_')]
    relationship_tables = [name for name in table_names if name.startswith('relationships_')]
    
    return entity_tables, relationship_tables


def upgrade():
    """Add enhanced KG columns to all entities and relationships tables"""
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Get all dynamic table names
    entity_tables, relationship_tables = get_dynamic_table_names()
    
    # Add enhanced entity columns to all entities tables
    for table_name in entity_tables:
        try:
            # Check if columns already exist before adding
            inspector = sa.inspect(engine)
            columns = [col['name'] for col in inspector.get_columns(table_name)]
            
            if 'canonical_id' not in columns:
                op.add_column(table_name, 
                             sa.Column('canonical_id', sa.VARCHAR(32), nullable=True))
            
            if 'normalized_name' not in columns:
                op.add_column(table_name, 
                             sa.Column('normalized_name', sa.VARCHAR(500), nullable=True))
        except Exception as e:
            print(f"Warning: Could not add columns to {table_name}: {e}")
    
    # Add enhanced relationship columns to all relationships tables  
    for table_name in relationship_tables:
        try:
            # Check if columns already exist before adding
            inspector = sa.inspect(engine)
            columns = [col['name'] for col in inspector.get_columns(table_name)]
            
            if 'relationship_type' not in columns:
                op.add_column(table_name, 
                             sa.Column('relationship_type', sa.VARCHAR(50), 
                                     nullable=True, server_default='generic'))
            
            if 'confidence' not in columns:
                op.add_column(table_name, 
                             sa.Column('confidence', sa.FLOAT, 
                                     nullable=True, server_default='0.8'))
                                     
            # Note: weight column already exists in the schema, but let's ensure it's there
            if 'weight' not in columns:
                op.add_column(table_name, 
                             sa.Column('weight', sa.FLOAT, 
                                     nullable=True, server_default='0.0'))
        except Exception as e:
            print(f"Warning: Could not add columns to {table_name}: {e}")
    
    # Add performance indexes
    with engine.begin() as connection:
        for table_name in entity_tables:
            try:
                # Add index on canonical_id if it doesn't exist
                connection.execute(text(f"""
                    CREATE INDEX IF NOT EXISTS idx_{table_name}_canonical_id 
                    ON {table_name}(canonical_id)
                """))
            except Exception as e:
                print(f"Warning: Could not create index on {table_name}: {e}")
        
        for table_name in relationship_tables:
            try:
                # Add indexes on relationship_type and weight
                connection.execute(text(f"""
                    CREATE INDEX IF NOT EXISTS idx_{table_name}_type 
                    ON {table_name}(relationship_type)
                """))
                connection.execute(text(f"""
                    CREATE INDEX IF NOT EXISTS idx_{table_name}_weight 
                    ON {table_name}(weight DESC)
                """))
            except Exception as e:
                print(f"Warning: Could not create indexes on {table_name}: {e}")
    
    # ### end Alembic commands ###


def downgrade():
    """Remove enhanced KG columns from all entities and relationships tables"""
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Get all dynamic table names
    entity_tables, relationship_tables = get_dynamic_table_names()
    
    # Remove performance indexes first
    with engine.begin() as connection:
        for table_name in entity_tables:
            try:
                connection.execute(text(f"DROP INDEX IF EXISTS idx_{table_name}_canonical_id ON {table_name}"))
            except Exception as e:
                print(f"Warning: Could not drop index on {table_name}: {e}")
        
        for table_name in relationship_tables:
            try:
                connection.execute(text(f"DROP INDEX IF EXISTS idx_{table_name}_type ON {table_name}"))
                connection.execute(text(f"DROP INDEX IF EXISTS idx_{table_name}_weight ON {table_name}"))
            except Exception as e:
                print(f"Warning: Could not drop indexes on {table_name}: {e}")
    
    # Remove enhanced relationship columns
    for table_name in relationship_tables:
        try:
            op.drop_column(table_name, 'confidence')
            op.drop_column(table_name, 'relationship_type')
            # Note: Keep weight column as it was already in the original schema
        except Exception as e:
            print(f"Warning: Could not remove columns from {table_name}: {e}")
    
    # Remove enhanced entity columns
    for table_name in entity_tables:
        try:
            op.drop_column(table_name, 'normalized_name')
            op.drop_column(table_name, 'canonical_id')
        except Exception as e:
            print(f"Warning: Could not remove columns from {table_name}: {e}")
    
    # ### end Alembic commands ###

