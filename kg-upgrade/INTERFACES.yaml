
# INTERFACES.yaml: Multi-Agent Communication Protocols, Data Structures, and Technical Interfaces

# Defines the formal contracts for communication between agents and the key 
# technical specifications for the PRD implementation.

version: 1.0

# ==============================================================================
# 1. Communication Protocols (Signals)
# ==============================================================================
Signals:
  PhaseInitiation:
    sender: Orchestrator
    receiver: Architect
    description: Triggers the Architect to analyze the next phase of the PRD.
    payload:
      phase_id: { type: string }
      prd_sections: { type: array, items: { type: string } }

  TaskDelegation:
    sender: Orchestrator
    receiver: Coder (Specific)
    description: Assigns an implementation task based on Architect's specs.
    payload:
      $ref: '#/DataStructures/ImplementationSpec'

  ImplementationComplete:
    sender: Coder
    receiver: Tester
    description: Signals that the Coder has finished implementation.
    payload:
      phase_id: { type: string }
      commit_ref: { type: string } # Identifier for the changes in the agentic IDE

  TestingComplete:
    sender: Tester
    receiver: Reviewer
    description: Signals that benchmarking and testing are complete.
    payload:
      $ref: '#/DataStructures/BenchmarkResult'

  ReviewComplete:
    sender: Reviewer
    receiver: Orchestrator
    description: Signals that the automated code review is complete.
    payload:
      $ref: '#/DataStructures/ReviewReport'

  ErrorSignal:
    sender: Any
    receiver: Orchestrator
    description: Reports a failure during execution (tool failure, syntax error, etc.).
    payload:
      agent_id: { type: string }
      error_type: { type: string }
      message: { type: string }

  CorrectiveActionRequired:
    sender: Orchestrator
    receiver: Architect
    description: Triggered by metric regression or review rejection. Requires Architect to use nx-mcp/ref to generate corrective specs.
    payload:
      phase_id: { type: string }
      reason: { type: string, enum: ["METRIC_REGRESSION", "REVIEW_REJECTION", "PERFORMANCE_ISSUE"] }
      data: { type: object } # The BenchmarkResult or ReviewReport causing the action.

# ==============================================================================
# 2. Data Structures (Payloads)
# ==============================================================================
DataStructures:
  ImplementationSpec:
    description: Detailed instructions generated by the Architect for the Coder.
    type: object
    required: [phase_id, target_files, instructions, mcp_constraints]
    properties:
      phase_id: { type: string }
      target_files: { type: array, items: { type: string } }
      instructions: { type: string, description: "Detailed, line-level guidance and code snippets." }
      mcp_constraints: { type: string, description: "Constraints provided by nx-mcp analysis." }

  BenchmarkResult:
    description: Output from the Tester agent after running kg_benchmark.py.
    type: object
    required: [phase_id, status, metrics]
    properties:
      phase_id: { type: string }
      status: { type: string, enum: ["SUCCESS", "FAILURE", "REGRESSION"] }
      metrics:
        type: object
        properties:
          duplicate_entity_rate: { type: number, format: float }
          edge_node_ratio: { type: number, format: float }
          processing_latency_ms: { type: number, format: float }
          throughput_entities_per_sec: { type: number, format: float }

  ReviewReport:
    description: Output from the Reviewer agent.
    type: object
    required: [phase_id, status, findings]
    properties:
      phase_id: { type: string }
      status: { type: string, enum: ["APPROVED", "REJECTED"] }
      findings:
        type: array
        items:
          properties:
            tool: { type: string, enum: ["nx-mcp", "coderabbit", "flake8"] }
            message: { type: string }

# ==============================================================================
# 3. Code Interfaces (Technical Specifications)
# ==============================================================================
CodeInterfaces:
  Configuration:
    file: core/autoflow/configs/knowledge_graph.py (New File)
    class: KnowledgeGraphConfig (Pydantic BaseModel)
    description: Central configuration object. Must support ENV overrides.
    fields:
      enable_enhanced_kg: { type: bool, default: False, env_override: ENABLE_ENHANCED_KG }
      canonicalization_enabled: { type: bool }
      typed_relationships_enabled: { type: bool }
      parallel_processing_enabled: { type: bool }
      entity_distance_threshold: { type: float, env_override: KG_ENTITY_DISTANCE_THRESHOLD }
      entity_cache_size: { type: int, env_override: ENTITY_CACHE_SIZE }

  DatabaseMigration:
    file: migrations/001_kg_enhancements.sql (New File)
    EntitiesTable:
      add_columns:
        canonical_id: VARCHAR(32) DEFAULT NULL
        normalized_name: VARCHAR(500) DEFAULT NULL
    RelationshipsTable:
      add_columns:
        relationship_type: VARCHAR(50) DEFAULT 'generic'
        confidence: FLOAT DEFAULT 0.8
        weight: FLOAT DEFAULT 0.0

  EvaluationFramework:
    file: examples/kg_benchmark.py (New File)
    class: KnowledgeGraphBenchmark
    description: Framework for measuring baseline vs enhanced performance.

  CoreModifications:
    TiDBGraphStore:
      file: core/autoflow/storage/graph_store/tidb_graph_store.py
      methods:
        __init__: {action: Modify, description: "Inject Config, Init LRUCache."}
        _normalize_entity_name: {action: New}
        _get_canonical_id: {action: New}
        find_or_create_entity: {action: Modify, description: "Integrate cache, normalization, enhanced thresholding."}
        create_relationship: {action: Modify, description: "Calculate weight, handle symmetry."}
    
    PredictRelationship (DSPy):
      file: core/autoflow/knowledge_graph/programs/extract_graph.py
      action: Modify
      add_fields: [relationship_type, confidence]

    SimpleKGExtractor:
      file: core/autoflow/knowledge_graph/extractors/simple.py
      methods:
        extract: {action: Modify, description: "Remove EntityCovariateExtractor call (Unified Extraction)."}

    KnowledgeGraphIndex:
      file: core/autoflow/knowledge_graph/index.py
      methods:
        __init__: {action: Modify, description: "Inject Config, Init ThreadPoolExecutor."}
        add_chunks_parallel: {action: New, description: "Implement concurrent chunk processing."}